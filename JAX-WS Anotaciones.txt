--Fuente: --> http://www.mkyong.com/tutorials/jax-ws-tutorials/ (aqui la informacion no esta completa) , http://docs.oracle.com/javaee/7/tutorial/doc/jaxws.htm
http://creativemad.com/blog/2009/07/tutoriales-web-services-jaxws-crear-un-ws-a-partir-de-un-wsdl/
http://java.globinch.com/enterprise-java/web-services/jax-ws/java-jax-ws-tutorial-develop-web-services-clients-consumers/ (aqui si explican todo)
--end fuente

Existen 2 tipos de Bindings RPC y Document styles, document es el por defecto.
mvn exec:java -Dexec.mainClass="org.ws.cliente.HelloWorldClient"
wsimport -keep http://localhost:9999/ws/hello?wsdl
mvn exec:java -Dexec.mainClass="org.ws.cliente.HelloWorldClientWsImport"

SOAP handler is a SOAP message interceptor, which is able to intercept incoming or outgoing SOAP message and manipulate its values.

mvn exec:java -Dexec.mainClass="org.ws2.documentstyle.HelloWorldPublisher"

mvn exec:java -Dexec.mainClass="org.ws2.documentstyle.cliente.HelloWorldClient"
mvn exec:java -Dexec.mainClass="org.MTOM.ws.ImagePublisher"
mvn exec:java -Dexec.mainClass="org.MTOM.ws.cliente.ImageClient"


mvn exec:java -Dexec.mainClass="org.SoapHandler.inserver.endpoint.WsPublisher"


The basic steps for creating a web service and client are as follows.

Code the implementation class.
Compile the implementation class.
Package the files into a WAR file.
Deploy the WAR file. The web service artifacts, which are used to communicate with clients, are generated by GlassFish Server during deployment.
Code the client class.
Use the wsimport Maven goal to generate and compile the web service artifacts needed to connect to the service.
Compile the client class.
Run the client.

